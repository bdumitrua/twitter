services:
    nginx:
        build:
            context: ./nginx
            dockerfile: Dockerfile
        ports:
            - "443:443"
            - "80:80"
        volumes:
            - ./frontend/public:/var/www/html/twitter
            - ./backend/storage/app/public:/var/www/sata/twitter
            - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
            - /etc/letsencrypt/:/etc/letsencrypt/
        depends_on:
            - frontend
        restart: unless-stopped
        networks:
            - app

    backend:
        build:
            context: ./backend
            dockerfile: Dockerfile
        environment:
            DB_HOST: mysql
            DB_DATABASE: twitter
            DB_USERNAME: root
            DB_PASSWORD: root
        deploy:
            resources:
                limits:
                    cpus: "4.0"
        ports:
            - 8000:8000
            - 1025:1025
        volumes:
            - ./backend:/app/backend
            - vendor:/app/backend/vendor
        depends_on:
            - mysql
            - redis
            - elasticsearch
            - kafka
            - prometheus
        networks:
            - app

    frontend:
        build:
            context: .
            dockerfile: frontend/Dockerfile
        tty: true
        ports:
            - 3000:3000
        volumes:
            - ./frontend:/app/frontend
            - ./backend/.env:/app/frontend/.env
            - node_modules:/app/frontend/node_modules
        depends_on:
            - backend
        networks:
            - app

    mysql:
        image: mysql
        environment:
            MYSQL_DATABASE: "twitter"
            MYSQL_USER: "admin"
            MYSQL_PASSWORD: "root"
            MYSQL_ROOT_PASSWORD: "root"
        ports:
            - 3306:3306
        volumes:
            - .dbdata:/var/lib/mysql
        restart: unless-stopped
        networks:
            - app

    redis:
        image: redis
        ports:
            - 6379:6379
        restart: unless-stopped
        networks:
            - app

    kafka:
        image: wurstmeister/kafka
        ports:
            - "9092:9092"
        environment:
            KAFKA_ADVERTISED_HOST_NAME: kafka
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        deploy:
            resources:
                limits:
                    cpus: "1.0"
        restart: unless-stopped
        networks:
            - app
        depends_on:
            - zookeeper

    zookeeper:
        image: wurstmeister/zookeeper
        ports:
            - "2181:2181"
        networks:
            - app

    elasticsearch:
        image: elasticsearch:8.10.1
        volumes:
            - ./elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
        environment:
            - "discovery.type=single-node"
            - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
        deploy:
            resources:
                limits:
                    cpus: "1.0"
        ports:
            - 9200:9200
            - 9300:9300
        restart: unless-stopped
        networks:
            - app

    # kibana:
    #     image: docker.elastic.co/kibana/kibana:8.10.1
    #     environment:
    #         - ELASTICSEARCH_URL=http://elasticsearch:9200
    #     ports:
    #         - "5601:5601"
    #     deploy:
    #         resources:
    #             limits:
    #                 cpus: "1.0"
    #     networks:
    #         - app
    #     depends_on:
    #         - elasticsearch

    prometheus:
        image: prom/prometheus
        volumes:
            - ./prometheus.yml:/etc/prometheus/prometheus.yml
        ports:
            - 9090:9090
        restart: unless-stopped
        networks:
            - app

    # grafana:
    #     image: grafana/grafana
    #     ports:
    #         - 3100:3000
    #     volumes:
    #         - grafana_data:/var/lib/grafana
    #     environment:
    #         - GF_SECURITY_ADMIN_PASSWORD=admin
    #     networks:
    #         - app

    # redis_exporter:
    #     image: oliver006/redis_exporter
    #     environment:
    #         REDIS_ADDR: redis:6379
    #     ports:
    #         - 9121:9121
    #     depends_on:
    #         - redis
    #     networks:
    #         - app

networks:
    app:
        driver: bridge

volumes:
    node_modules:
    vendor:
    # grafana_data:
